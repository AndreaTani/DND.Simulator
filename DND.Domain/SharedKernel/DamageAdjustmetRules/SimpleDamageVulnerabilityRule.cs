namespace DND.Domain.SharedKernel
{
    /// <summary>
    /// Standard implementation of damage adjustment rule for damage vulnerabilities.
    /// </summary>
    public class SimpleDamageVulnerabilityRule : IModificationRule
    {
        private readonly DamageType _vulnerabilityType;

        public SimpleDamageVulnerabilityRule(DamageType vulnerabilityType) => _vulnerabilityType = vulnerabilityType;

        public int Apply(int baseDamage, DamageType damageType, DamageSource damageSource, bool isSilvered)
        {
            return damageType == _vulnerabilityType ? baseDamage * 2 : baseDamage;
        }

        public DamageType GetDamageType()
        {
            return _vulnerabilityType;
        }

        public float GetModificationFactor(DamageType damageType, DamageSource damageSource = DamageSource.Mundane, bool isSilvered = false)
        {
            if(damageType == _vulnerabilityType)
                return 2.0f;

            return 1.0f;
        }
    }
}

